---
// Cart Icon Component
---

  <div
      x-data="{
    ...cartStore,
    sCartOrCheckoutPage: false,
    isLoaded: false
  }"
  x-init="
    init();
    isOpen = false;
    isCartOrCheckoutPage = window.location.pathname === '/cart' || window.location.pathname.startsWith('/checkout');
    isLoaded = true;
    
    // Listen for cart updates to refresh badge and state
    window.addEventListener('cart-updated', (event) => {
      // Force Alpine.js to re-evaluate reactive properties
      $nextTick(() => {
        // Update items from the event detail if available
        if (event.detail && event.detail.items) {
          this.items = [...event.detail.items];
        } else {
          // Fallback: force reactivity update
          this.items = [...this.items];
        }
      });
    });
    
    // Also listen for force update events
    window.addEventListener('force-cart-update', (event) => {
      // Force Alpine.js to re-evaluate reactive properties
      $nextTick(() => {
        if (event.detail && event.detail.items) {
          this.items = [...event.detail.items];
        } else {
          this.items = [...this.items];
        }
      });
    });
    
    // Listen for cart store ready
    window.addEventListener('cart-store-ready', (event) => {
      $nextTick(() => {
        if (event.detail && event.detail.items) {
          this.items = [...event.detail.items];
        }
      });
    });
  "
    class="relative"
    :class="isCartOrCheckoutPage ? 'cursor-default' : 'cursor-pointer'"
    @click="!isCartOrCheckoutPage && toggleCart()"
  >
    <!-- Cart Icon -->
    <div class="relative p-2">
      <i
        class="fa-solid fa-cart-shopping text-xl transition-colors"
        :class="isCartOrCheckoutPage ? 'text-gray-400 cursor-default' : 'text-brand-brown hover:text-brand-brown/80 cursor-pointer'"
        :class="isPulsing ? 'cart-icon-pulse' : ''"
      ></i>

                    <!-- Cart Badge with Pulse Animation -->
              <div
                x-show="isLoaded && getTotalItems() > 0"
                x-cloak
                x-text="getTotalItems()"
                class="absolute -top-1 -right-1 bg-brand-red text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold"
                :class="isPulsing ? 'cart-badge-pulse' : ''"
              ></div>
    </div>

  <!-- Cart Dropdown -->
  <div
    x-show="isLoaded && isOpen"
    x-cloak
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 scale-95"
    x-transition:enter-end="opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100 scale-100"
    x-transition:leave-end="opacity-0 scale-95"
    @click.away="closeCart()"
    class="absolute left-0 mt-2 w-80 bg-white rounded-lg shadow-xl border border-gray-200 z-50"
  >
    <div class="p-4">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-bold text-brand-brown">سبد خرید</h3>
                  <button
            @click="closeCart()"
            class="text-gray-400 hover:text-gray-600"
          >
            <i class="fa-solid fa-xmark text-lg"></i>
          </button>
      </div>

              <!-- Cart Items -->
        <div x-show="items.length === 0" class="text-center py-8 text-gray-500">
          <i class="fa-solid fa-cart-shopping w-12 h-12 mx-auto mb-4 text-gray-300 text-4xl"></i>
          <p>سبد خرید شما خالی است</p>
        </div>

      <div x-show="items.length > 0" class="space-y-3 max-h-64 overflow-y-auto">
        <template x-for="item in items" :key="item.id">
          <div class="flex items-center space-x-3 p-2 border-b border-gray-100">
            <img :src="item.image" :alt="item.name" class="w-12 h-12 object-cover rounded">
            <div class="flex-1">
              <h4 class="text-sm font-medium text-brand-brown" x-text="item.name"></h4>
              <p class="text-xs text-gray-500" x-text="formatPrice(item.price)"></p>
            </div>
            <div class="flex items-center space-x-2">
              <button
                @click="updateQuantity(item.id, item.quantity - 1)"
                class="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center text-sm hover:bg-gray-200"
              >-</button>
              <span class="text-sm font-medium" x-text="item.quantity"></span>
              <button
                @click="updateQuantity(item.id, item.quantity + 1)"
                class="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center text-sm hover:bg-gray-200"
              >+</button>
            </div>
                          <button
                @click="removeItem(item.id)"
                class="text-red-500 hover:text-red-700"
              >
                <i class="fa-solid fa-trash text-sm"></i>
              </button>
          </div>
        </template>
      </div>

      <!-- Cart Footer -->
      <div x-show="items.length > 0" class="mt-4 pt-4 border-t border-gray-200">
        <div class="flex justify-between items-center mb-4">
          <span class="font-bold text-brand-brown">مجموع:</span>
          <span class="font-bold text-brand-brown" x-text="formatPrice(getTotalPrice())"></span>
        </div>
        <div class="space-y-2">
          <a
            href="/cart"
            @click="closeCart()"
            class="block w-full bg-brand-brown text-white text-center py-2 px-4 rounded-lg hover:bg-brand-brown/80 transition-colors"
          >
            مشاهده سبد خرید
          </a>
          <button
            @click="clearCart()"
            class="block w-full bg-gray-100 text-gray-700 text-center py-2 px-4 rounded-lg hover:bg-gray-200 transition-colors"
          >
            پاک کردن سبد
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  [x-cloak] {
    display: none !important;
  }

  .cart-badge-pulse {
    animation: cartPulse 1s ease-in-out;
  }

  .cart-icon-pulse {
    animation: cartIconPulse 1s ease-in-out;
  }

  @keyframes cartPulse {
    0% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(220, 38, 38, 0.7);
    }
    50% {
      transform: scale(1.2);
      box-shadow: 0 0 0 15px rgba(220, 38, 38, 0);
    }
    100% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(220, 38, 38, 0);
    }
  }

  @keyframes cartIconPulse {
    0% {
      transform: scale(1);
      filter: brightness(1);
    }
    50% {
      transform: scale(1.15);
      filter: brightness(1.2);
    }
    100% {
      transform: scale(1);
      filter: brightness(1);
    }
  }
</style>

<script>
  // Ensure CartIcon listens for cart updates and directly updates the badge
  document.addEventListener('DOMContentLoaded', () => {
    // Function to directly update the cart badge
    const updateCartBadge = () => {
      const cartStore = (window as any).cartStore;
      if (!cartStore) return;

      const totalItems = cartStore.getTotalItems();

      // Find the cart badge element directly - try multiple selectors
      let cartBadge = document.querySelector('[x-text="getTotalItems()"]') as HTMLElement;
      if (!cartBadge) {
        // Fallback: look for the badge by its classes and position
        cartBadge = document.querySelector('.absolute.-top-1.-right-1.bg-brand-red.text-white.text-xs.rounded-full.h-5.w-5.flex.items-center.justify-center.font-bold') as HTMLElement;
      }
      if (!cartBadge) {
        // Last resort: look for any element with the cart badge classes
        cartBadge = document.querySelector('.bg-brand-red.text-white.text-xs.rounded-full.h-5.w-5') as HTMLElement;
      }
      if (cartBadge) {
        // Update the text content directly
        cartBadge.textContent = totalItems.toString();

        // Show/hide the badge based on total items
        if (totalItems > 0) {
          cartBadge.style.display = 'flex';
        } else {
          cartBadge.style.display = 'none';
        }
      }
    };

    // Listen for cart updates
    window.addEventListener('cart-updated', updateCartBadge);

    // Also listen for cart store ready
    window.addEventListener('cart-store-ready', updateCartBadge);

    // Initial update
    setTimeout(updateCartBadge, 500);
  });
</script>
